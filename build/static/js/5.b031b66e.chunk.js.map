{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getCharacterByName","_ref3","_callee3","name","_context3","_x2","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","_comics$textObjects$","title","price","prices","pageCount","language","textObjects","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","imgStyle","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","CharInfo","charId","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","CharSearchForm","errorMessage","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/5.b031b66e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt={\"Error\"} />\n    )\n}\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess } = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=1fe3cae44952e1d3ef0f735e1c2d3d9f';\n    const _baseOffSet = 210;\n\n    const getAllCharacters = async (offset = _baseOffSet) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const _transformCharacter = (char) => {\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformComics = (comics) => {\n\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE',\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} p.`\n                : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n        }\n    }\n\n    return {\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        clearError,\n        process,\n        setProcess,\n        getAllComics,\n        getComic\n    }\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, { method, body, headers });\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n\n        } catch (e) {\n            setProcess('loading');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return { request, clearError, process, setProcess }\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />;\n            break;\n        case 'loading':\n            return <Spinner />;\n            break;\n        case 'confirmed':\n            return <Component data={data} />;\n            break;\n        case 'error':\n            return <ErrorMessage />;\n            break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar} >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = async (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process]);\n\n    return (\n        <div className=\"char__list\" >\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button >\n        </div >\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n        <div className=\"char__search-wrapper\">\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                <div className=\"inner\">To page</div>\n            </Link>\n        </div> :\n        <div className=\"char__search-error\">\n            The character was not found. Check the name and try again\n        </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues={{\n                    charName: ''\n                }}\n                validationSchema={Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit={({ charName }) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field\n                            id=\"charName\"\n                            name='charName'\n                            type='text'\n                            placeholder=\"Enter name\" />\n                        <button\n                            type='submit'\n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm />\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    )\n}\n\nexport default MainPage;"],"sourceRoot":""}