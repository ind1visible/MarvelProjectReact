{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getCharacterByName","_ref3","_callee3","name","_context3","_x2","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","_comics$textObjects$","title","price","prices","pageCount","language","textObjects","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","AppBanner","avengers","avengersLogo","SinglePage","dataType","useParams","setData","_useMarvelService","useEffect","updateData","then","onDataLoaded"],"mappings":"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","file":"static/js/6.d0a246d6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt={\"Error\"} />\n    )\n}\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess } = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=1fe3cae44952e1d3ef0f735e1c2d3d9f';\n    const _baseOffSet = 210;\n\n    const getAllCharacters = async (offset = _baseOffSet) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const _transformCharacter = (char) => {\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformComics = (comics) => {\n\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE',\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} p.`\n                : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n        }\n    }\n\n    return {\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        clearError,\n        process,\n        setProcess,\n        getAllComics,\n        getComic\n    }\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, { method, body, headers });\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n\n        } catch (e) {\n            setProcess('loading');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return { request, clearError, process, setProcess }\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />;\n            break;\n        case 'loading':\n            return <Spinner />;\n            break;\n        case 'confirmed':\n            return <Component data={data} />;\n            break;\n        case 'error':\n            return <ErrorMessage />;\n            break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport AppBanner from \"../appBanner/AppBanner\";\nimport setContent from '../../utils/setContent';\n\nconst SinglePage = ({ Component, dataType }) => {\n    const { id } = useParams();\n    const [data, setData] = useState(null);\n    const { getComic, getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateData()\n    }, [id])\n\n    const updateData = () => {\n        clearError();\n\n        switch (dataType) {\n            case 'comic':\n                getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'))\n                break;\n            case 'character':\n                getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'))\n        }\n    }\n\n    const onDataLoaded = (data) => {\n        setData(data);\n    }\n\n    return (\n        <>\n            <AppBanner />\n            {setContent(process, Component, data)}\n        </>\n    )\n}\n\nexport default SinglePage;"],"sourceRoot":""}